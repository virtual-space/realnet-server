{
    "types": [
        {
            "name": "Exp"
        },
        {
            "name": "Prim",
            "base": "Exp"
        },
        {
            "name": "Lambda",
            "base": "Exp",
            "attributes": {
                "comment": ["Lambda accepts a list of parameters as a first argument and its body as a second argument, each of which is an expression"]
            }
        },
        {
            "name": "Define",
            "base": "Exp",
            "attributes": {
                "comment": ["Define first parameter is a the name of the item to be defined followed by a list of arguments as a second argument",
                            "an third parameter is an expression. This likely means creating a new item in the current environment"]
            }
        },
        {
            "name": "If",
            "base": "Exp",
            "attributes": {
                "comment": ["If first parameter is an expression to be evaluated as a Bool (predicate), second parameter is the expression",
                            "to be returned if the first parameter evaluated to True (consequent) and the third parameter is an expression", 
                            "to be returned in case the predicate evaluated to False "]
            }
        },
        {
            "name": "Cond",
            "base": "Exp",
            "attributes": {
                "comment": ["Lambda has parameters and body, each of which is an expression"]
            }
        },
        {
            "name": "Func",
            "base": "OP",
            "attributes": {
                "comment": ["Func is an operation that takes a list of its child items that are evaluated. returns some other items",
                            "it takes a list of its child items comprising of a function and a set of named arguments and returns as its children an expression", 
                            "that is a result of the function being applied to a set of arguments "]
            }
        },
        {
            "name": "Bool",
            "base": "Exp",
            "attributes": {
                "comment": "This is a base type for booleans. it's value will evaluate to boolean to be recognized from the name"
            }
        },
        {
            "name": "True",
            "base": "Bool"
        },
        {
            "name": "False",
            "base": "Bool"
        },
        {
            "name": "Bool?",
            "base": "Prim",
            "attributes": {
                "comment": "Primitive that returns true if item is a boolean"
            }
        },
        {
            "name": "Int",
            "base": "Num",
            "attributes": {
                "comment": "This is a base type for integers. it's value will evaluate to the integer to be recognized from the name"
            }
        },
        {
            "name": "Int?",
            "base": "Prim",
            "attributes": {
                "comment": "Primitive that returns true if item is an integer"
            }
        },
        {
            "name": "Dbl",
            "base": "Num",
            "attributes": {
                "comment": "This is a base type for real numbers. it's value will evaluate to double to be recognized from the name"
            }
        },
        {
            "name": "Dbl?",
            "base": "Prim",
            "attributes": {
                "comment": "Primitive that returns true if item is a double"
            }
        },
        {
            "name": "Str",
            "base": "Exp",
            "attributes": {
                "comment": "This is a base type for strings. it's value will evaluate to its name"
            }
        },
        {
            "name": "Str?",
            "base": "Prim",
            "attributes": {
                "comment": "Primitive that returns true if item is a string"
            }
        },
        {
            "name": "VAR",
            "attributes": {
                "comment": "Variable: This is a base type for arguments for item operations. The argument will determine what item properties/children will form the input when the operation is evaluated"
            }
        },
        {
            "name": "OP",
            "attributes": {
                "comment": "This is a base type for item operations. It's arguments will read item properties when the operation is evaluated and it's body that contains the expression to be evaluated"
            }
        },
        {
            "name": "VOID",
            "base": "OP",
            "attributes": {
                "comment": "This is also an equivalent of: 0000, void type and list terminator"
            }
        },
        {
            "name": "AND",
            "base": "OP",
            "attributes": {
                "comment": "This is a monoid"
            }
        },
        {
            "name": "TUP",
            "base": "AND",
            "attributes": {
                "begin_match": "(",
                "delimiter_match": ",",
                "attribute_delimiter_match": ":",
                "end_match": ")",
                "comment": "ALL: This is an equivalent of: 0001, monoid for constructing tuples. It's children are items of the tuple"
            }
        },
        {
            "name": "LST",
            "base": "AND",
            "attributes": {
                "begin_match": "[",
                "delimiter_match": ",",
                "attribute_delimiter_match": ":",
                "end_match": "]",
                "comment": "ALL: This is an equivalent of: 0001, monoid for constructing lists. It's children are items of the list"
            }
        },
        {
            "name": "SET",
            "base": "AND",
            "attributes": {
                "begin_match": "{",
                "delimiter_match": ",",
                "attribute_delimiter_match": ":",
                "end_match": "}",
                "comment": "ALL: This is an equivalent of: 0001, monoid for constructing sets. It's children are items of the set"
            }
        },
        {
            "name": "DICT",
            "base": "AND",
            "attributes": {
                "begin_match": "{",
                "delimiter_match": ",",
                "is_attribute_parser": "true",
                "attribute_delimiter_match": ":",
                "end_match": "}",
                "comment": "ALL: This is an equivalent of: 0001, monoid for constructing dicts. It's children are items of the dict"
            }
        },
        {
            "name": "SNG",
            "base": "OP",
            "attributes": {
                "comment": "SINGLE: This is an equivalent of: 0010, it will return the first child if and only if there is no second item or the second item is void, otherwise it will return VOID"
            }
        },
        {
            "name": "FST",
            "base": "OP",
            "attributes": {
                "comment": "FIRST: This is an equivalent of: 0011, it will return the first child item no matter what follows, VOID in case of no child items"
            }
        },
        {
            "name": "DUA",
            "base": "OP",
            "attributes": {
                "comment": "DUAL: This is an equivalent of: 0010, it will return the second child item if and only if the first child item is VOID, otherwise it will return VOID"
            }
        },
        {
            "name": "SND",
            "base": "OP",
            "attributes": {
                "comment": "SECOND: This is an equivalent of: 0100, it will return the second child item if there is one, otherwise VOID"
            }
        },
        {
            "name": "XOR",
            "base": "OP",
            "attributes": {
                "comment": "XOR: This is an equivalent of: 0110, we can use this operation to evaluate a type that is either of its child items from a particular expression"
            }
        },
        {
            "name": "OR",
            "base": "OP",
            "attributes": {
                "comment": "OR: This is an equivalent of: 0111, it will return the first of its child items that are not VOID"
            }
        },
        {
            "name": "NOR",
            "base": "OP",
            "attributes": {
                "comment": ["NOR: This is an equivalent of: 1000, it will return the default item if both children are VOID",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NXOR",
            "base": "OP",
            "attributes": {
                "comment": ["NXOR: This is an equivalent of: 1001, it will return the default item if the second item is void or if both items are non-VOID",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NSND",
            "base": "OP",
            "attributes": {
                "comment": ["NSECOND: This is an equivalent of: 1010, it will return the default item if all items are void or if all items are non-VOID",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NDUA",
            "base": "OP",
            "attributes": {
                "comment": ["NDUAL: This is an equivalent of: 1011, it will return the default item if both FST and SND are void, FST if it is not void or AND(FST,SND) if both are non-void",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NFST",
            "base": "OP",
            "attributes": {
                "comment": ["NFIRST: This is an equivalent of: 1100, it will return the default item if FST is void",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NSNG",
            "base": "OP",
            "attributes": {
                "comment": ["NSINGLE: This is an equivalent of: 1101, it will return the default item if both FST and SND are void, SND if SND is non-Void or AND(FST,SND) if both are non-void",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NAND",
            "base": "OP",
            "attributes": {
                "comment": ["NAND: This is an equivalent of: 1110, it will return the default item if both FST and SND are void, FST, SND and VOID if both FST and SND are non-void",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "NVOID",
            "base": "OP",
            "attributes": {
                "comment": ["NVOID: This is an equivalent of: 1111, it will return the default item if both FST and SND are void, FST if it is non-void, SND if it is non-void and default if both FST and SND are non-void",
                            "This is a ternary operation accepting a default argument "]
            }
        },
        {
            "name": "COND",
            "base": "AND",
            "attributes": {
                "comment": ["COND is an operation that takes its first child as an expression to be evaluated and if it evaluates to true it will evaluate its second child",
                            "and return that as a result "]
            },
            "instances": [
                {
                    "name": "Arg",
                    "type": "VAR"
                },
                {
                    "name": "If",
                    "type": "FUNC"
                },
                {
                    "name": "Then",
                    "type": "EXP"
                }
            ]
        },
        {
            "name": "CASE",
            "base": "FUNC",
            "attributes": {
                "comment": ["Case evaluator/decision switch. This is a conditional that given an expression returns an evaluated expression", 
                            "based on case criteria. it takes a list of its child items comprising of Conds that are evaluated."]
            }
        },
        {
            "name": "EvalBody",
            "base": "CASE",
            "instances": [
                {
                    "name": "IsNumber",
                    "type": "EXP"
                }
            ]
        },
        {
            "name": "EVAL",
            "base": "OP",
            "attributes": {
                "comment": ["The Universal Machine. It takes a description of a machine as input", 
                            "and becomes a simulator for the described machine https://www.youtube.com/watch?v=aAlR3cezPJg&ab_channel=MITOpenCourseWare",
                            "it takes a list of its child items comprising of a function and a set of named arguments and returns as its children an expression", 
                            "that is a result of the function being applied to a set of arguments "]
            },
            "instances": [
                {
                    "name": "Exp",
                    "type": "Var",
                    "attributes": {
                        "target": "child:name:Exp"
                    }
                },
                {
                    "name": "Env",
                    "type": "Var",
                    "attributes": {
                        "target": "child:name:Env"
                    }
                },
                {
                    "name": "Body",
                    "type": "Func",
                    "instances": [
                        {
                            "name": "Case",
                            "type": "Case",
                            "instances": [
                                {
                                    "name": "Case",
                                    "type": "Cond",
                                    "instances": [
                                        {
                                            "name": "applyNumber?",
                                            "type": "Apply",
                                            "instances":[
                                                {
                                                    "name": "number?",
                                                    "type": "Func"
                                                },
                                                {
                                                    "name": "Exp",
                                                    "type": "Var"
                                                }
                                            ]
                                        }
                                        
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
            
        }
    ]
}